Prompt: 2-Bosqich - Bot Yaratish va Boshqarish
(Quyidagi matnni to'liq nusxalab, Replit AI'ga joylashtiring)

Salom. Biz "ChatBot Factory" loyihasining 2-bosqichini boshlaymiz: Bot Yaratish va Boshqarish.

Sizning vazifangiz — tizimga kirgan foydalanuvchilar uchun botlarni boshqarishning to'liq siklini (CRUD - Create, Read, Update, Delete) implementatsiya qilish.

1-VAZIFA: Ma'lumotlar Bazasi Modellarini Yangilash (chatbot_factory/models.py)

Platformaning kelajakdagi barcha funksiyalariga zamin yaratish uchun chatbot_factory/models.py faylidagi kodni quyidagi to'liq va yangilangan kod bilan almashtiring. Bu User modeliga aloqalarni qo'shadi va yangi Subscription, Bot va boshqa modellarni yaratadi.

Python

# chatbot_factory/models.py
from . import db
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import enum

class SubscriptionType(enum.Enum):
    FREE = "free"
    PREMIUM = "premium"

class BotStatus(enum.Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"

class PlatformType(enum.Enum):
    TELEGRAM = "telegram"
    INSTAGRAM = "instagram"
    WHATSAPP = "whatsapp"

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_admin = db.Column(db.Boolean, default=False, nullable=False)
    language = db.Column(db.String(5), default='en', nullable=False)
    
    subscription = db.relationship('Subscription', backref='user', uselist=False, cascade='all, delete-orphan')
    bots = db.relationship('Bot', backref='owner', lazy=True, cascade='all, delete-orphan')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Subscription(db.Model):
    __tablename__ = 'subscriptions'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    subscription_type = db.Column(db.Enum(SubscriptionType), default=SubscriptionType.FREE)
    max_bots = db.Column(db.Integer, default=1)
    messages_this_month = db.Column(db.Integer, default=0)

class Bot(db.Model):
    __tablename__ = 'bots'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    platform_type = db.Column(db.Enum(PlatformType), default=PlatformType.TELEGRAM)
    telegram_token = db.Column(db.String(255), nullable=True)
    system_prompt = db.Column(db.Text, default="You are a helpful AI assistant.")
    status = db.Column(db.Enum(BotStatus), default=BotStatus.INACTIVE)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    knowledge_base = db.relationship('KnowledgeBase', backref='bot', lazy=True, cascade='all, delete-orphan')

class KnowledgeBase(db.Model):
    __tablename__ = 'knowledge_base'
    id = db.Column(db.Integer, primary_key=True)
    bot_id = db.Column(db.Integer, db.ForeignKey('bots.id'), nullable=False)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)

class AdminBroadcast(db.Model):
    __tablename__ = 'admin_broadcasts'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
2-VAZIFA: Bot Uchun Forma Yaratish (chatbot_factory/forms.py)

chatbot_factory/forms.py faylini ochib, unga BotForm nomli yangi klass qo'shing.

Python

# chatbot_factory/forms.py ga qo'shimcha
from .models import PlatformType

class BotForm(FlaskForm):
    name = StringField(_('Bot Name'), validators=[DataRequired(), Length(min=3, max=100)])
    platform_type = SelectField(_('Platform'), 
                                choices=[(p.name, p.value.capitalize()) for p in PlatformType],
                                validators=[DataRequired()])
    telegram_token = StringField(_('Telegram Bot Token'))
    submit = SubmitField(_('Save Bot'))
3-VAZIFA: Botlarni Boshqarish Marshrutlarini Yaratish

chatbot_factory/routes/ papkasida bots_routes.py nomli yangi fayl yarating va unga quyidagi kodni to'liq joylashtiring:

Python

# chatbot_factory/routes/bots_routes.py
from flask import render_template, url_for, flash, redirect, request, Blueprint, abort
from flask_login import current_user, login_required
from flask_babel import gettext as _
from chatbot_factory import db
from chatbot_factory.models import Bot
from chatbot_factory.forms import BotForm

bots_bp = Blueprint('bots', __name__)

@bots_bp.route("/bot/create", methods=['GET', 'POST'])
@login_required
def create_bot():
    form = BotForm()
    if form.validate_on_submit():
        bot = Bot(name=form.name.data, platform_type=form.platform_type.data,
                  telegram_token=form.telegram_token.data, owner=current_user)
        db.session.add(bot)
        db.session.commit()
        flash(_('Your new bot has been created!'), 'success')
        return redirect(url_for('auth.dashboard'))
    return render_template('bot_form.html', title=_('Create Bot'), form=form, legend=_('New Bot'))

@bots_bp.route("/bot/<int:bot_id>/edit", methods=['GET', 'POST'])
@login_required
def edit_bot(bot_id):
    bot = Bot.query.get_or_404(bot_id)
    if bot.owner != current_user:
        abort(403)
    form = BotForm()
    if form.validate_on_submit():
        bot.name = form.name.data
        bot.platform_type = form.platform_type.data
        bot.telegram_token = form.telegram_token.data
        db.session.commit()
        flash(_('Your bot has been updated!'), 'success')
        return redirect(url_for('auth.dashboard'))
    elif request.method == 'GET':
        form.name.data = bot.name
        form.platform_type.data = bot.platform_type.name
        form.telegram_token.data = bot.telegram_token
    return render_template('bot_form.html', title=_('Edit Bot'), form=form, legend=_('Edit Bot'))

@bots_bp.route("/bot/<int:bot_id>/delete", methods=['POST'])
@login_required
def delete_bot(bot_id):
    bot = Bot.query.get_or_404(bot_id)
    if bot.owner != current_user:
        abort(403)
    db.session.delete(bot)
    db.session.commit()
    flash(_('Your bot has been deleted!'), 'success')
    return redirect(url_for('auth.dashboard'))
4-VAZIFA: __init__.py va Marshrut Fayllarini To'g'rilash

chatbot_factory/__init__.py faylida yangi bots_bp'ni ro'yxatdan o'tkazing: from .routes.bots_routes import bots_bp va app.register_blueprint(bots_bp).

chatbot_factory/routes/auth_routes.py faylidagi /dashboard marshrutini botlar ro'yxatini ham yuboradigan qilib o'zgartiring:

Python

@auth_bp.route("/dashboard")
@login_required
def dashboard():
    bots = Bot.query.filter_by(owner=current_user).order_by(Bot.created_at.desc()).all()
    return render_template('dashboard.html', title=_('Dashboard'), bots=bots)
5-VAZIFA: Shablonlarni Yangilash va Yaratish

chatbot_factory/templates/dashboard.html faylidagi kodni quyidagi bilan to'liq almashtiring:

HTML

{% extends "base.html" %}
{% block content %}
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">{{ _('My Bots') }}</h1>
        <a class="btn btn-primary" href="{{ url_for('bots.create_bot') }}">{{ _('Create New Bot') }}</a>
    </div>

    {% if bots %}
        <ul class="list-group">
            {% for bot in bots %}
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1">{{ bot.name }}</h5>
                        <small class="text-muted">{{ _('Platform:') }} {{ bot.platform_type.value.capitalize() }}</small>
                    </div>
                    <div>
                        <a href="{{ url_for('bots.edit_bot', bot_id=bot.id) }}" class="btn btn-secondary btn-sm">{{ _('Edit') }}</a>
                        <form action="{{ url_for('bots.delete_bot', bot_id=bot.id) }}" method="POST" class="d-inline" onsubmit="return confirm('{{ _('Are you sure you want to delete this bot?') }}');">
                            <button type="submit" class="btn btn-danger btn-sm">{{ _('Delete') }}</button>
                        </form>
                    </div>
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <div class="alert alert-info">
            {{ _('You have not created any bots yet. Click the "Create New Bot" button to get started!') }}
        </div>
    {% endif %}
{% endblock %}
chatbot_factory/templates/ papkasida bot_form.html nomli yangi fayl yarating:

HTML

{% extends "base.html" %}
{% block content %}
<div class="content-section col-md-8 offset-md-2">
  <form method="POST" action="">
      {{ form.hidden_tag() }}
      <fieldset class="form-group">
          <legend class="border-bottom mb-4">{{ legend }}</legend>
          <div class="form-group mb-3">
              {{ form.name.label(class="form-control-label") }}
              {{ form.name(class="form-control form-control-lg") }}
          </div>
          <div class="form-group mb-3">
              {{ form.platform_type.label(class="form-control-label") }}
              {{ form.platform_type(class="form-select form-select-lg") }}
          </div>
          <div class="form-group mb-3">
              {{ form.telegram_token.label(class="form-control-label") }}
              {{ form.telegram_token(class="form-control form-control-lg") }}
          </div>
      </fieldset>
      <div class="form-group mb-3">
          {{ form.submit(class="btn btn-outline-info") }}
          <a href="{{ url_for('auth.dashboard') }}" class="btn btn-outline-secondary">{{ _('Cancel') }}</a>
      </div>
  </form>
</div>
{% endblock content %}
6-VAZIFA: Ma'lumotlar Bazasi Migratsiyasi (JUDA MUHIM!)

Yangi modellar qo'shilgani uchun ma'lumotlar bazasi sxemasini yangilash shart. Shell'da quyidagi buyruqlarni bajaring:

export FLASK_APP=chatbot_factory

flask db migrate -m "Add core app models"

flask db upgrade

7-VAZIFA: Yakuniy Hisobotni Yaratish

Barcha topshiriqlarni bajarib bo'lgach, loyiha ildiz papkasida HISOBOT_2-BOSQICH.md nomli fayl yarating va uni quyidagi ma'lumotlar bilan to'ldiring:

Markdown

# "ChatBot Factory" Loyihasi Bo'yicha Hisobot (2-Bosqich)

## 1. Xulosa
Botlarni boshqarishning to'liq sikli (CRUD) muvaffaqiyatli implementatsiya qilindi. Foydalanuvchilar endi o'z botlarini Dashboard orqali yarata oladi, ko'ra oladi, tahrirlay oladi va o'chira oladi.

## 2. Bajarilgan Ishlar
- [ ] Barcha asosiy modellar (`Subscription`, `Bot`, `KnowledgeBase`, `AdminBroadcast`) `models.py`'ga qo'shildi.
- [ ] `BotForm` klassi `forms.py`'da yaratildi.
- [ ] Botlarni boshqarish uchun `bots_routes.py`'da yangi `Blueprint` va barcha CRUD marshrutlari yaratildi.
- [ ] `dashboard.html` shabloni botlar ro'yxatini ko'rsatish uchun to'liq yangilandi.
- [ ] `bot_form.html` shabloni bot yaratish/tahrirlash uchun yaratildi.
- [ ] Yangi modellar uchun ma'lumotlar bazasi migratsiyasi muvaffaqiyatli bajarildi.

## 3. Loyihani Tekshirish Yo'riqnomasi
Quyidagi amallarni bajarib, yangi funksionallikni tekshiring:
1. Tizimga kiring va Dashboard sahifasiga o'ting. "Create New Bot" tugmasi ko'rinishi kerak.
2. Yangi bot yarating. Muvaffaqiyatli yaratilgach, Dashboard'da uning nomi ko'rinishi kerak.
3. "Edit" tugmasini bosib, bot nomini o'zgartiring va saqlang. O'zgarish Dashboard'da aks etishi kerak.
4. "Delete" tugmasini bosib, botni o'chiring. Bot ro'yxatdan yo'qolishi kerak.











Deep Research

Видео

Изображение

Canvas


Gemini может ошибаться, поэтому проверяйте его ответы.