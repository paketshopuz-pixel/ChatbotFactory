Salom. Biz Kengaytirilgan Bilimlar Bazasining birinchi qismini boshlaymiz: 5a-Bosqich - Maxsus "Mahsulot" Ma'lumotlar Turi.

Sizning vazifangiz â€” platformaga mahsulotlarni (nomi, narxi, tavsifi, rasm havolasi bilan) saqlash uchun yangi ma'lumotlar bazasi modelini qo'shish, ularni kiritish uchun interfeys yaratish va AI'ga ushbu mahsulotlar haqida javob berishni o'rgatish.

1-VAZIFA: Yangi Product Modelini Yaratish

chatbot_factory/models.py faylini oching, unga Product nomli yangi klass qo'shing va Bot modeliga tegishli relationship'ni qo'shing.

Python

# chatbot_factory/models.py ga qo'shing

class Product(db.Model):
    __tablename__ = 'products'
    id = db.Column(db.Integer, primary_key=True)
    bot_id = db.Column(db.Integer, db.ForeignKey('bots.id'), nullable=False)
    name = db.Column(db.String(200), nullable=False)
    price = db.Column(db.String(100), nullable=True)
    description = db.Column(db.Text, nullable=True)
    image_url = db.Column(db.String(500), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Mavjud Bot model klassi ichiga bu qatorni qo'shing:
class Bot(db.Model):
    # ... mavjud qatorlar ...
    products = db.relationship('Product', backref='bot_owner', lazy=True, cascade='all, delete-orphan')
2-VAZIFA: Mahsulot Uchun Forma Yaratish (chatbot_factory/forms.py)

chatbot_factory/forms.py fayliga ProductForm nomli yangi klass qo'shing.

Python

# chatbot_factory/forms.py ga qo'shimcha

class ProductForm(FlaskForm):
    name = StringField(_('Product Name'), validators=[DataRequired(), Length(max=200)])
    price = StringField(_('Price (e.g., 25,000 so\'m or $10)'))
    description = TextAreaField(_('Description'))
    image_url = StringField(_('Image URL (optional)'))
    submit = SubmitField(_('Save Product'))
3-VAZIFA: Marshrutlarni Mahsulot Boshqaruvi Uchun Yangilash

chatbot_factory/routes/knowledge_routes.py faylidagi kodni quyidagi yangilangan versiya bilan to'liq almashtiring. Bu fayl endi oddiy matnlarni ham, mahsulotlarni ham boshqaradi.

Python

# chatbot_factory/routes/knowledge_routes.py
from flask import render_template, url_for, flash, redirect, request, Blueprint, abort
from flask_login import current_user, login_required
from flask_babel import gettext as _
from .. import db
from ..models import Bot, KnowledgeBase, Product
from ..forms import KnowledgeBaseForm, ProductForm

knowledge_bp = Blueprint('knowledge', __name__)

@knowledge_bp.route("/bot/<int:bot_id>/knowledge", methods=['GET'])
@login_required
def manage_knowledge(bot_id):
    bot = Bot.query.get_or_404(bot_id)
    if bot.owner != current_user:
        abort(403)
    
    text_form = KnowledgeBaseForm()
    entries = bot.knowledge_base
    products = bot.products
    return render_template('knowledge_base.html', title=_('Knowledge Base'), bot=bot, 
                           text_form=text_form, entries=entries, products=products)

@knowledge_bp.route("/bot/<int:bot_id>/knowledge/add_text", methods=['POST'])
@login_required
def add_text_entry(bot_id):
    bot = Bot.query.get_or_404(bot_id)
    if bot.owner != current_user:
        abort(403)
    form = KnowledgeBaseForm()
    if form.validate_on_submit():
        entry = KnowledgeBase(title=form.title.data, content=form.content.data, bot=bot)
        db.session.add(entry)
        db.session.commit()
        flash(_('New text entry has been added!'), 'success')
    return redirect(url_for('knowledge.manage_knowledge', bot_id=bot_id))

@knowledge_bp.route("/bot/<int:bot_id>/add_product", methods=['GET', 'POST'])
@login_required
def add_product(bot_id):
    bot = Bot.query.get_or_404(bot_id)
    if bot.owner != current_user:
        abort(403)
    form = ProductForm()
    if form.validate_on_submit():
        product = Product(bot_id=bot.id, name=form.name.data, price=form.price.data, 
                          description=form.description.data, image_url=form.image_url.data)
        db.session.add(product)
        db.session.commit()
        flash(_('New product has been added to the knowledge base!'), 'success')
        return redirect(url_for('knowledge.manage_knowledge', bot_id=bot.id))
    return render_template('add_product.html', title=_('Add Product'), form=form, bot=bot)

@knowledge_bp.route("/knowledge/<int:entry_id>/delete", methods=['POST'])
@login_required
def delete_knowledge(entry_id):
    # Bu funksiya o'zgarishsiz qoladi
    entry = KnowledgeBase.query.get_or_404(entry_id)
    bot = entry.bot
    if bot.owner != current_user:
        abort(403)
    db.session.delete(entry)
    db.session.commit()
    flash(_('The text entry has been deleted.'), 'success')
    return redirect(url_for('knowledge.manage_knowledge', bot_id=bot.id))

@knowledge_bp.route("/product/<int:product_id>/delete", methods=['POST'])
@login_required
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)
    bot = product.bot_owner
    if bot.owner != current_user:
        abort(403)
    db.session.delete(product)
    db.session.commit()
    flash(_('The product has been deleted.'), 'success')
    return redirect(url_for('knowledge.manage_knowledge', bot_id=bot.id))
4-VAZIFA: AI Servisini Mahsulotlarni "Tushunish"ga O'rgatish

chatbot_factory/services/ai_service.py faylidagi kodni quyidagi bilan to'liq almashtiring.

Python

# chatbot_factory/services/ai_service.py
import os
import logging
import google.generativeai as genai

class AIService:
    def __init__(self):
        # ... __init__ qismi o'zgarishsiz ...
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            logging.warning("GEMINI_API_KEY not found. AI responses will be disabled.")
            self.model = None
            return
        
        try:
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            logging.info("Google Gemini AI service configured successfully.")
        except Exception as e:
            logging.error(f"Error configuring Gemini AI: {e}")
            self.model = None

    async def get_response(self, bot, user_message):
        if not self.model:
            return "Sorry, the AI service is currently unavailable."
        
        try:
            # Matnli bilimlar bazasini yig'ish
            knowledge_context = ""
            text_entries = bot.knowledge_base
            if text_entries:
                knowledge_context += "\n\n--- UMUMIY MA'LUMOTLAR BAZASI ---\n"
                for entry in text_entries:
                    knowledge_context += f"MAVZU: {entry.title}\nMA'LUMOT: {entry.content}\n\n"
            
            # Mahsulotlar bazasini yig'ish
            product_entries = bot.products
            if product_entries:
                knowledge_context += "\n\n--- MAHSULOTLAR RO'YXATI ---\n"
                for product in product_entries:
                    knowledge_context += f"MAHSULOT NOMI: {product.name}\n"
                    if product.price:
                        knowledge_context += f"NARXI: {product.price}\n"
                    if product.description:
                        knowledge_context += f"TAVSIFI: {product.description}\n"
                    if product.image_url:
                        knowledge_context += f"RASM HAVOLASI: {product.image_url}\n"
                    knowledge_context += "---\n"

            knowledge_context += "--- BILIMLAR BAZASI TUGADI ---\n"
            knowledge_context += "Foydalanuvchi savoliga javob berish uchun YUQORIDAGI BILIMLAR BAZASIDAN (Umumiy ma'lumotlar va Mahsulotlar) birinchi navbatda foydalaning. Agar savol bu ma'lumotlarga aloqador bo'lmasa, umumiy bilimingizdan foydalanib javob bering."

            system_instruction = f"{bot.system_prompt}\nSizning ismingiz \"{bot.name}\".\n{knowledge_context}"
            
            response = await self.model.generate_content_async(
                user_message,
                generation_config=genai.types.GenerationConfig(temperature=0.7),
                system_instruction=system_instruction
            )
            return response.text.strip()
        except Exception as e:
            logging.error(f"AI Service error during response generation: {e}")
            return "Texnik nosozliklar tufayli javob bera olmayman."
5-VAZIFA: Interfeysni Yangilash

chatbot_factory/templates/knowledge_base.html faylini quyidagi kod bilan to'liq almashtiring. U endi tab'larga (tabs) ega bo'ladi:

HTML

{% extends "base.html" %}
{% block content %}
<h1 class="mb-4">{{ _('Manage Knowledge Base for') }} "{{ bot.name }}"</h1>

<ul class="nav nav-tabs" id="kbTabs" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button" role="tab">{{ _('Products') }}</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="text-tab" data-bs-toggle="tab" data-bs-target="#text" type="button" role="tab">{{ _('Text Entries') }}</button>
  </li>
</ul>

<div class="tab-content" id="kbTabsContent">
  <div class="tab-pane fade show active" id="products" role="tabpanel">
    <div class="p-3 border border-top-0">
        <a href="{{ url_for('knowledge.add_product', bot_id=bot.id) }}" class="btn btn-primary mb-3">{{ _('Add New Product') }}</a>
        {% if products %}
            {% for product in products %}
                <div class="card mb-2">
                    <div class="card-body">
                         <div class="d-flex w-100 justify-content-between">
                            <h5 class="card-title">{{ product.name }}</h5>
                            <form action="{{ url_for('knowledge.delete_product', product_id=product.id) }}" method="POST" onsubmit="return confirm('{{ _('Are you sure?') }}');">
                                 <button type="submit" class="btn-close"></button>
                            </form>
                        </div>
                        <h6 class="card-subtitle mb-2 text-muted">{{ product.price }}</h6>
                        <p class="card-text">{{ product.description }}</p>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <p>{{ _('No products added yet.') }}</p>
        {% endif %}
    </div>
  </div>
  <div class="tab-pane fade" id="text" role="tabpanel">
    <div class="p-3 border border-top-0">
        <form method="POST" action="{{ url_for('knowledge.add_text_entry', bot_id=bot.id) }}">
            {{ text_form.hidden_tag() }}
            <div class="mb-3">{{ text_form.title.label(class="form-label") }} {{ text_form.title(class="form-control") }}</div>
            <div class="mb-3">{{ text_form.content.label(class="form-label") }} {{ text_form.content(class="form-control", rows="3") }}</div>
            <div class="mb-3">{{ text_form.submit(class="btn btn-primary") }}</div>
        </form>
        <hr>
        {% if entries %}
            <div class="list-group">
                {% for entry in entries %}
                <div class="list-group-item">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">{{ entry.title }}</h5>
                        <form action="{{ url_for('knowledge.delete_knowledge', entry_id=entry.id) }}" method="POST" onsubmit="return confirm('{{ _('Are you sure?') }}');">
                             <button type="submit" class="btn-close"></button>
                        </form>
                    </div>
                    <p class="mb-1" style="white-space: pre-wrap;">{{ entry.content }}</p>
                </div>
                {% endfor %}
            </div>
        {% else %}
            <p>{{ _('No text entries yet.') }}</p>
        {% endif %}
    </div>
  </div>
</div>
<a href="{{ url_for('auth.dashboard') }}" class="btn btn-secondary mt-4">{{ _('Back to Dashboard') }}</a>
{% endblock %}
chatbot_factory/templates/ papkasida add_product.html nomli yangi fayl yarating:

HTML

{% extends "base.html" %}
{% block content %}
<div class="col-md-8 offset-md-2">
    <h3>{{ _('Add New Product to') }} "{{ bot.name }}"</h3>
    <form method="POST" action="">
        {{ form.hidden_tag() }}
        <div class="mb-3">{{ form.name.label(class="form-label") }} {{ form.name(class="form-control") }}</div>
        <div class="mb-3">{{ form.price.label(class="form-label") }} {{ form.price(class="form-control") }}</div>
        <div class="mb-3">{{ form.description.label(class="form-label") }} {{ form.description(class="form-control", rows="4") }}</div>
        <div class="mb-3">{{ form.image_url.label(class="form-label") }} {{ form.image_url(class="form-control") }}</div>
        <div class="mb-3">
            {{ form.submit(class="btn btn-primary") }}
            <a href="{{ url_for('knowledge.manage_knowledge', bot_id=bot.id) }}" class="btn btn-secondary">{{ _('Cancel') }}</a>
        </div>
    </form>
</div>
{% endblock %}
6-VAZIFA: Ma'lumotlar Bazasi Migratsiyasi (JUDA MUHIM!)

Yangi Product modeli qo'shilgani uchun ma'lumotlar bazasini yangilash shart. Shell'da quyidagi buyruqlarni bajaring:

export FLASK_APP=chatbot_factory

flask db migrate -m "Add Product model"

flask db upgrade

7-VAZIFA: Yakuniy Hisobotni Yaratish
HISOBOT_5a-BOSQICH.md nomli fayl yarating va unga quyidagi ma'lumotlarni joylashtiring:

Markdown

# "ChatBot Factory" Loyihasi Bo'yicha Hisobot (5a-Bosqich)

## 1. Xulosa
Bilimlar bazasiga maxsus "Mahsulot" ma'lumot turini qo'shish funksionali muvaffaqiyatli amalga oshirildi. Foydalanuvchilar endi o'z botlariga mahsulotlar ro'yxatini kiritishi va AI ushbu ma'lumotlardan foydalanib savollarga javob berishi mumkin.

## 2. Bajarilgan Ishlar
- [ ] `Product` modeli `models.py`'ga qo'shildi.
- [ ] `ProductForm` formasi `forms.py`'da yaratildi.
- [ ] Marshrutlar va shablonlar mahsulotlarni qo'shish, ko'rish va o'chirish uchun yangilandi.
- [ ] `AIService` mahsulotlar haqidagi ma'lumotlarni tushunadigan va ishlatadigan qilib o'zgartirildi.
- [ ] Ma'lumotlar bazasi migratsiyasi muvaffaqiyatli bajarildi.

## 3. Loyihani Tekshirish Yo'riqnomasi
Quyidagi amallarni bajarib, yangi funksionallikni tekshiring:
1. Dashboard'dan biror bot uchun "Knowledge Base" tugmasini bosing. Yangi tab'li interfeysni ko'rishingiz kerak.
2. "Products" tab'ida "Add New Product" tugmasini bosing.
3. Yangi mahsulot ma'lumotlarini (nomi, narxi, tavsifi) kiriting va saqlang.
4. "Products" ro'yxatida yangi mahsulot paydo bo'lganini tekshiring.
5. Botni ishga tushiring va Telegram'da unga savol bering: "Menga [mahsulot nomi] haqida ma'lumot ber" yoki "[mahsulot nomi] narxi qancha?".
6. **Kutilayotgan Natija:** Bot siz kiritgan aniq mahsulot ma'lumotlaridan foydalanib javob berishi kerak.